Hand in for Assignment 2
Documentation Log:

The process of commenting out all code pertaining to "servlet" was actually quite straightforward, but what hung us up was the fact that none of the methods needed not to be static, but (not having used java in a while) we tried to resolve this by making the main method not static. This problem cascaded by keeping us from being able to run the program due to classpath problems, so we eventually solved this by making all of the arithmetic methods static. Since the main class is never instantiated (to our knowledge) there is no good reason why the arithmetic methods shouldn't be static.

After we commented out everything, Nelson worked on setting up a UI.
Nelson got the basic functionality of the UI working so that you could select a conversion and convert a number, but the program only ran once and did not explain the converted value, which differed greatly from the experience provided by the web app.
Following that, Michael and Gabriel worked to get the UI functioning as intended by letting the menu continue working as long as the user wanted.
Cleaning up the code was what followed as we removed large sections of commented codes and useless imports.


Description of new UI:

Our new UI for the program is a command line interface.
Once it is called, it prints out some introductory information.
Following that it prints a list of possible selections for the user.
From there the user can input any number, although the program will only work if the user inputs 1-15
Upon receiving a selection, it asks the user for a number for the conversion.
Then it prints out the conversion, and the original menu for the user to select again.


Maintainability Assessment:

The original programmers made it easy to edit the program by commenting what sections did what and by clearly signposting what each part did with good names and whitespace. The code is very well separated between the front end and back end parts. We easily replaced the web page front end with our own front end without even changing any of the back end conversion code. Very maintainable.

The original programmers made it hard to edit the program by using very short function names. For example, the letter M is used in the conversion functions as either Meters or Miles. Since Meters and Miles are both units for distance, this makes functions like F2M() vague. F2M() could either mean feet to meters or feet to miles.

One thing we would do differently if we did the assignment again is to add more test code and check for normal cases. We currently do not check if the user input is a string or int. The program only accepts int or else it will crash.